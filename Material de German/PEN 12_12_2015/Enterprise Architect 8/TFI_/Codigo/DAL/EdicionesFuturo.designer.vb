'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.296
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Ediciones")>  _
Partial Public Class EdicionesFuturoDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCliente(instance As Cliente)
    End Sub
  Partial Private Sub UpdateCliente(instance As Cliente)
    End Sub
  Partial Private Sub DeleteCliente(instance As Cliente)
    End Sub
  Partial Private Sub InsertFamilia(instance As Familia)
    End Sub
  Partial Private Sub UpdateFamilia(instance As Familia)
    End Sub
  Partial Private Sub DeleteFamilia(instance As Familia)
    End Sub
  Partial Private Sub InsertLibro(instance As Libro)
    End Sub
  Partial Private Sub UpdateLibro(instance As Libro)
    End Sub
  Partial Private Sub DeleteLibro(instance As Libro)
    End Sub
  Partial Private Sub InsertLocalidad(instance As Localidad)
    End Sub
  Partial Private Sub UpdateLocalidad(instance As Localidad)
    End Sub
  Partial Private Sub DeleteLocalidad(instance As Localidad)
    End Sub
  Partial Private Sub InsertPatente(instance As Patente)
    End Sub
  Partial Private Sub UpdatePatente(instance As Patente)
    End Sub
  Partial Private Sub DeletePatente(instance As Patente)
    End Sub
  Partial Private Sub InsertUsuario(instance As Usuario)
    End Sub
  Partial Private Sub UpdateUsuario(instance As Usuario)
    End Sub
  Partial Private Sub DeleteUsuario(instance As Usuario)
    End Sub
  Partial Private Sub InsertCriticidad(instance As Criticidad)
    End Sub
  Partial Private Sub UpdateCriticidad(instance As Criticidad)
    End Sub
  Partial Private Sub DeleteCriticidad(instance As Criticidad)
    End Sub
  Partial Private Sub InsertDVV(instance As DVV)
    End Sub
  Partial Private Sub UpdateDVV(instance As DVV)
    End Sub
  Partial Private Sub DeleteDVV(instance As DVV)
    End Sub
  Partial Private Sub InsertVendedor(instance As Vendedor)
    End Sub
  Partial Private Sub UpdateVendedor(instance As Vendedor)
    End Sub
  Partial Private Sub DeleteVendedor(instance As Vendedor)
    End Sub
  Partial Private Sub InsertVenta(instance As Venta)
    End Sub
  Partial Private Sub UpdateVenta(instance As Venta)
    End Sub
  Partial Private Sub DeleteVenta(instance As Venta)
    End Sub
  Partial Private Sub Insertusu_pat(instance As usu_pat)
    End Sub
  Partial Private Sub Updateusu_pat(instance As usu_pat)
    End Sub
  Partial Private Sub Deleteusu_pat(instance As usu_pat)
    End Sub
  Partial Private Sub Insertfam_usu(instance As fam_usu)
    End Sub
  Partial Private Sub Updatefam_usu(instance As fam_usu)
    End Sub
  Partial Private Sub Deletefam_usu(instance As fam_usu)
    End Sub
  Partial Private Sub Insertpat_fam(instance As pat_fam)
    End Sub
  Partial Private Sub Updatepat_fam(instance As pat_fam)
    End Sub
  Partial Private Sub Deletepat_fam(instance As pat_fam)
    End Sub
  Partial Private Sub InsertBitacora(instance As Bitacora)
    End Sub
  Partial Private Sub UpdateBitacora(instance As Bitacora)
    End Sub
  Partial Private Sub DeleteBitacora(instance As Bitacora)
    End Sub
  #End Region
	
	Public Sub New()
        MyBase.New(DAL.DALSQLConfig.DameInstancia.LeerTexto("Data Source"), mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Cliente() As System.Data.Linq.Table(Of Cliente)
		Get
			Return Me.GetTable(Of Cliente)
		End Get
	End Property
	
	Public ReadOnly Property Direccion() As System.Data.Linq.Table(Of Direccion)
		Get
			Return Me.GetTable(Of Direccion)
		End Get
	End Property
	
	Public ReadOnly Property Familia() As System.Data.Linq.Table(Of Familia)
		Get
			Return Me.GetTable(Of Familia)
		End Get
	End Property
	
	Public ReadOnly Property Idioma() As System.Data.Linq.Table(Of Idioma)
		Get
			Return Me.GetTable(Of Idioma)
		End Get
	End Property
	
	Public ReadOnly Property Libro() As System.Data.Linq.Table(Of Libro)
		Get
			Return Me.GetTable(Of Libro)
		End Get
	End Property
	
	Public ReadOnly Property Localidad() As System.Data.Linq.Table(Of Localidad)
		Get
			Return Me.GetTable(Of Localidad)
		End Get
	End Property
	
	Public ReadOnly Property Patente() As System.Data.Linq.Table(Of Patente)
		Get
			Return Me.GetTable(Of Patente)
		End Get
	End Property
	
	Public ReadOnly Property traduccion() As System.Data.Linq.Table(Of traduccion)
		Get
			Return Me.GetTable(Of traduccion)
		End Get
	End Property
	
	Public ReadOnly Property Usuario() As System.Data.Linq.Table(Of Usuario)
		Get
			Return Me.GetTable(Of Usuario)
		End Get
	End Property
	
	Public ReadOnly Property vent_lib() As System.Data.Linq.Table(Of vent_lib)
		Get
			Return Me.GetTable(Of vent_lib)
		End Get
	End Property
	
	Public ReadOnly Property Criticidad() As System.Data.Linq.Table(Of Criticidad)
		Get
			Return Me.GetTable(Of Criticidad)
		End Get
	End Property
	
	Public ReadOnly Property DVV() As System.Data.Linq.Table(Of DVV)
		Get
			Return Me.GetTable(Of DVV)
		End Get
	End Property
	
	Public ReadOnly Property Vendedor() As System.Data.Linq.Table(Of Vendedor)
		Get
			Return Me.GetTable(Of Vendedor)
		End Get
	End Property
	
	Public ReadOnly Property Venta() As System.Data.Linq.Table(Of Venta)
		Get
			Return Me.GetTable(Of Venta)
		End Get
	End Property
	
	Public ReadOnly Property usu_pat() As System.Data.Linq.Table(Of usu_pat)
		Get
			Return Me.GetTable(Of usu_pat)
		End Get
	End Property
	
	Public ReadOnly Property fam_usu() As System.Data.Linq.Table(Of fam_usu)
		Get
			Return Me.GetTable(Of fam_usu)
		End Get
	End Property
	
	Public ReadOnly Property pat_fam() As System.Data.Linq.Table(Of pat_fam)
		Get
			Return Me.GetTable(Of pat_fam)
		End Get
	End Property
	
	Public ReadOnly Property Bitacora() As System.Data.Linq.Table(Of Bitacora)
		Get
			Return Me.GetTable(Of Bitacora)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente")>  _
Partial Public Class Cliente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _clie_id As Integer
	
	Private _clie_nom As String
	
	Private _clie_ape As String
	
	Private _clie_dir As String
	
	Private _clie_tel As Integer
	
	Private _clie_saldo As Decimal
	
	Private _clie_fec_alta As Date
	
	Private _clie_activo As Boolean
	
	Private _clie_dni As Integer
	
	Private _clie_email As String
	
	Private _clie_dvh As Integer
	
	Private _clie_usu_id As Integer
	
	Private _clie_dir_id As Integer
	
	Private _Venta As EntitySet(Of Venta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onclie_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onclie_idChanged()
    End Sub
    Partial Private Sub Onclie_nomChanging(value As String)
    End Sub
    Partial Private Sub Onclie_nomChanged()
    End Sub
    Partial Private Sub Onclie_apeChanging(value As String)
    End Sub
    Partial Private Sub Onclie_apeChanged()
    End Sub
    Partial Private Sub Onclie_dirChanging(value As String)
    End Sub
    Partial Private Sub Onclie_dirChanged()
    End Sub
    Partial Private Sub Onclie_telChanging(value As Integer)
    End Sub
    Partial Private Sub Onclie_telChanged()
    End Sub
    Partial Private Sub Onclie_saldoChanging(value As Decimal)
    End Sub
    Partial Private Sub Onclie_saldoChanged()
    End Sub
    Partial Private Sub Onclie_fec_altaChanging(value As Date)
    End Sub
    Partial Private Sub Onclie_fec_altaChanged()
    End Sub
    Partial Private Sub Onclie_activoChanging(value As Boolean)
    End Sub
    Partial Private Sub Onclie_activoChanged()
    End Sub
    Partial Private Sub Onclie_dniChanging(value As Integer)
    End Sub
    Partial Private Sub Onclie_dniChanged()
    End Sub
    Partial Private Sub Onclie_emailChanging(value As String)
    End Sub
    Partial Private Sub Onclie_emailChanged()
    End Sub
    Partial Private Sub Onclie_dvhChanging(value As Integer)
    End Sub
    Partial Private Sub Onclie_dvhChanged()
    End Sub
    Partial Private Sub Onclie_usu_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onclie_usu_idChanged()
    End Sub
    Partial Private Sub Onclie_dir_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onclie_dir_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Venta = New EntitySet(Of Venta)(AddressOf Me.attach_Venta, AddressOf Me.detach_Venta)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property clie_id() As Integer
		Get
			Return Me._clie_id
		End Get
		Set
			If ((Me._clie_id = value)  _
						= false) Then
				Me.Onclie_idChanging(value)
				Me.SendPropertyChanging
				Me._clie_id = value
				Me.SendPropertyChanged("clie_id")
				Me.Onclie_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_nom", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property clie_nom() As String
		Get
			Return Me._clie_nom
		End Get
		Set
			If (String.Equals(Me._clie_nom, value) = false) Then
				Me.Onclie_nomChanging(value)
				Me.SendPropertyChanging
				Me._clie_nom = value
				Me.SendPropertyChanged("clie_nom")
				Me.Onclie_nomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_ape", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property clie_ape() As String
		Get
			Return Me._clie_ape
		End Get
		Set
			If (String.Equals(Me._clie_ape, value) = false) Then
				Me.Onclie_apeChanging(value)
				Me.SendPropertyChanging
				Me._clie_ape = value
				Me.SendPropertyChanged("clie_ape")
				Me.Onclie_apeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_dir", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property clie_dir() As String
		Get
			Return Me._clie_dir
		End Get
		Set
			If (String.Equals(Me._clie_dir, value) = false) Then
				Me.Onclie_dirChanging(value)
				Me.SendPropertyChanging
				Me._clie_dir = value
				Me.SendPropertyChanged("clie_dir")
				Me.Onclie_dirChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_tel", DbType:="Int NOT NULL")>  _
	Public Property clie_tel() As Integer
		Get
			Return Me._clie_tel
		End Get
		Set
			If ((Me._clie_tel = value)  _
						= false) Then
				Me.Onclie_telChanging(value)
				Me.SendPropertyChanging
				Me._clie_tel = value
				Me.SendPropertyChanged("clie_tel")
				Me.Onclie_telChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_saldo", DbType:="Decimal (10,0) NOT NULL")>  _
	Public Property clie_saldo() As Decimal
		Get
			Return Me._clie_saldo
		End Get
		Set
			If ((Me._clie_saldo = value)  _
						= false) Then
				Me.Onclie_saldoChanging(value)
				Me.SendPropertyChanging
				Me._clie_saldo = value
				Me.SendPropertyChanged("clie_saldo")
				Me.Onclie_saldoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_fec_alta", DbType:="DateTime NOT NULL")>  _
	Public Property clie_fec_alta() As Date
		Get
			Return Me._clie_fec_alta
		End Get
		Set
			If ((Me._clie_fec_alta = value)  _
						= false) Then
				Me.Onclie_fec_altaChanging(value)
				Me.SendPropertyChanging
				Me._clie_fec_alta = value
				Me.SendPropertyChanged("clie_fec_alta")
				Me.Onclie_fec_altaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_activo", DbType:="Bit NOT NULL")>  _
	Public Property clie_activo() As Boolean
		Get
			Return Me._clie_activo
		End Get
		Set
			If ((Me._clie_activo = value)  _
						= false) Then
				Me.Onclie_activoChanging(value)
				Me.SendPropertyChanging
				Me._clie_activo = value
				Me.SendPropertyChanged("clie_activo")
				Me.Onclie_activoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_dni", DbType:="Int NOT NULL")>  _
	Public Property clie_dni() As Integer
		Get
			Return Me._clie_dni
		End Get
		Set
			If ((Me._clie_dni = value)  _
						= false) Then
				Me.Onclie_dniChanging(value)
				Me.SendPropertyChanging
				Me._clie_dni = value
				Me.SendPropertyChanged("clie_dni")
				Me.Onclie_dniChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_email", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property clie_email() As String
		Get
			Return Me._clie_email
		End Get
		Set
			If (String.Equals(Me._clie_email, value) = false) Then
				Me.Onclie_emailChanging(value)
				Me.SendPropertyChanging
				Me._clie_email = value
				Me.SendPropertyChanged("clie_email")
				Me.Onclie_emailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_dvh", DbType:="Int NOT NULL")>  _
	Public Property clie_dvh() As Integer
		Get
			Return Me._clie_dvh
		End Get
		Set
			If ((Me._clie_dvh = value)  _
						= false) Then
				Me.Onclie_dvhChanging(value)
				Me.SendPropertyChanging
				Me._clie_dvh = value
				Me.SendPropertyChanged("clie_dvh")
				Me.Onclie_dvhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_usu_id", DbType:="Int NOT NULL")>  _
	Public Property clie_usu_id() As Integer
		Get
			Return Me._clie_usu_id
		End Get
		Set
			If ((Me._clie_usu_id = value)  _
						= false) Then
				Me.Onclie_usu_idChanging(value)
				Me.SendPropertyChanging
				Me._clie_usu_id = value
				Me.SendPropertyChanged("clie_usu_id")
				Me.Onclie_usu_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clie_dir_id", DbType:="Int NOT NULL")>  _
	Public Property clie_dir_id() As Integer
		Get
			Return Me._clie_dir_id
		End Get
		Set
			If ((Me._clie_dir_id = value)  _
						= false) Then
				Me.Onclie_dir_idChanging(value)
				Me.SendPropertyChanging
				Me._clie_dir_id = value
				Me.SendPropertyChanged("clie_dir_id")
				Me.Onclie_dir_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Venta", Storage:="_Venta", ThisKey:="clie_id", OtherKey:="vent_clie_id")>  _
	Public Property Venta() As EntitySet(Of Venta)
		Get
			Return Me._Venta
		End Get
		Set
			Me._Venta.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Venta(ByVal entity As Venta)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Venta(ByVal entity As Venta)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Direccion")>  _
Partial Public Class Direccion
	
	Private _dir_id As Integer
	
	Private _dir_desc As String
	
	Private _loc_id As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_id", DbType:="Int NOT NULL")>  _
	Public Property dir_id() As Integer
		Get
			Return Me._dir_id
		End Get
		Set
			If ((Me._dir_id = value)  _
						= false) Then
				Me._dir_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property dir_desc() As String
		Get
			Return Me._dir_desc
		End Get
		Set
			If (String.Equals(Me._dir_desc, value) = false) Then
				Me._dir_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loc_id", DbType:="Int NOT NULL")>  _
	Public Property loc_id() As Integer
		Get
			Return Me._loc_id
		End Get
		Set
			If ((Me._loc_id = value)  _
						= false) Then
				Me._loc_id = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Familia")>  _
Partial Public Class Familia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _fam_id As Integer
	
	Private _fam_nom As String
	
	Private _fam_desc As String
	
	Private _fam_patente As String
	
	Private _fam_dvh As Integer
	
	Private _fam_usu As EntitySet(Of fam_usu)
	
	Private _pat_fam As EntitySet(Of pat_fam)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onfam_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onfam_idChanged()
    End Sub
    Partial Private Sub Onfam_nomChanging(value As String)
    End Sub
    Partial Private Sub Onfam_nomChanged()
    End Sub
    Partial Private Sub Onfam_descChanging(value As String)
    End Sub
    Partial Private Sub Onfam_descChanged()
    End Sub
    Partial Private Sub Onfam_patenteChanging(value As String)
    End Sub
    Partial Private Sub Onfam_patenteChanged()
    End Sub
    Partial Private Sub Onfam_dvhChanging(value As Integer)
    End Sub
    Partial Private Sub Onfam_dvhChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fam_usu = New EntitySet(Of fam_usu)(AddressOf Me.attach_fam_usu, AddressOf Me.detach_fam_usu)
		Me._pat_fam = New EntitySet(Of pat_fam)(AddressOf Me.attach_pat_fam, AddressOf Me.detach_pat_fam)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fam_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property fam_id() As Integer
		Get
			Return Me._fam_id
		End Get
		Set
			If ((Me._fam_id = value)  _
						= false) Then
				Me.Onfam_idChanging(value)
				Me.SendPropertyChanging
				Me._fam_id = value
				Me.SendPropertyChanged("fam_id")
				Me.Onfam_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fam_nom", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property fam_nom() As String
		Get
			Return Me._fam_nom
		End Get
		Set
			If (String.Equals(Me._fam_nom, value) = false) Then
				Me.Onfam_nomChanging(value)
				Me.SendPropertyChanging
				Me._fam_nom = value
				Me.SendPropertyChanged("fam_nom")
				Me.Onfam_nomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fam_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property fam_desc() As String
		Get
			Return Me._fam_desc
		End Get
		Set
			If (String.Equals(Me._fam_desc, value) = false) Then
				Me.Onfam_descChanging(value)
				Me.SendPropertyChanging
				Me._fam_desc = value
				Me.SendPropertyChanged("fam_desc")
				Me.Onfam_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fam_patente", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property fam_patente() As String
		Get
			Return Me._fam_patente
		End Get
		Set
			If (String.Equals(Me._fam_patente, value) = false) Then
				Me.Onfam_patenteChanging(value)
				Me.SendPropertyChanging
				Me._fam_patente = value
				Me.SendPropertyChanged("fam_patente")
				Me.Onfam_patenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fam_dvh", DbType:="Int NOT NULL")>  _
	Public Property fam_dvh() As Integer
		Get
			Return Me._fam_dvh
		End Get
		Set
			If ((Me._fam_dvh = value)  _
						= false) Then
				Me.Onfam_dvhChanging(value)
				Me.SendPropertyChanging
				Me._fam_dvh = value
				Me.SendPropertyChanged("fam_dvh")
				Me.Onfam_dvhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Familia_fam_usu", Storage:="_fam_usu", ThisKey:="fam_id", OtherKey:="fam_id")>  _
	Public Property fam_usu() As EntitySet(Of fam_usu)
		Get
			Return Me._fam_usu
		End Get
		Set
			Me._fam_usu.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Familia_pat_fam", Storage:="_pat_fam", ThisKey:="fam_id", OtherKey:="fam_id")>  _
	Public Property pat_fam() As EntitySet(Of pat_fam)
		Get
			Return Me._pat_fam
		End Get
		Set
			Me._pat_fam.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_fam_usu(ByVal entity As fam_usu)
		Me.SendPropertyChanging
		entity.Familia = Me
	End Sub
	
	Private Sub detach_fam_usu(ByVal entity As fam_usu)
		Me.SendPropertyChanging
		entity.Familia = Nothing
	End Sub
	
	Private Sub attach_pat_fam(ByVal entity As pat_fam)
		Me.SendPropertyChanging
		entity.Familia = Me
	End Sub
	
	Private Sub detach_pat_fam(ByVal entity As pat_fam)
		Me.SendPropertyChanging
		entity.Familia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Idioma")>  _
Partial Public Class Idioma
	
	Private _idio_id As Integer
	
	Private _idio_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idio_id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property idio_id() As Integer
		Get
			Return Me._idio_id
		End Get
		Set
			If ((Me._idio_id = value)  _
						= false) Then
				Me._idio_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idio_desc", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property idio_desc() As String
		Get
			Return Me._idio_desc
		End Get
		Set
			If (String.Equals(Me._idio_desc, value) = false) Then
				Me._idio_desc = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Libro")>  _
Partial Public Class Libro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _lib_id As Integer
	
	Private _lib_desc As String
	
	Private _lib_cant As Integer
	
	Private _lib_precio As Integer
	
	Private _lib_activo As Boolean
	
	Private _lib_editorial As String
	
	Private _lib_usu_id As Integer
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onlib_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onlib_idChanged()
    End Sub
    Partial Private Sub Onlib_descChanging(value As String)
    End Sub
    Partial Private Sub Onlib_descChanged()
    End Sub
    Partial Private Sub Onlib_cantChanging(value As Integer)
    End Sub
    Partial Private Sub Onlib_cantChanged()
    End Sub
    Partial Private Sub Onlib_precioChanging(value As Integer)
    End Sub
    Partial Private Sub Onlib_precioChanged()
    End Sub
    Partial Private Sub Onlib_activoChanging(value As Boolean)
    End Sub
    Partial Private Sub Onlib_activoChanged()
    End Sub
    Partial Private Sub Onlib_editorialChanging(value As String)
    End Sub
    Partial Private Sub Onlib_editorialChanged()
    End Sub
    Partial Private Sub Onlib_usu_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onlib_usu_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lib_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property lib_id() As Integer
		Get
			Return Me._lib_id
		End Get
		Set
			If ((Me._lib_id = value)  _
						= false) Then
				Me.Onlib_idChanging(value)
				Me.SendPropertyChanging
				Me._lib_id = value
				Me.SendPropertyChanged("lib_id")
				Me.Onlib_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lib_desc", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property lib_desc() As String
		Get
			Return Me._lib_desc
		End Get
		Set
			If (String.Equals(Me._lib_desc, value) = false) Then
				Me.Onlib_descChanging(value)
				Me.SendPropertyChanging
				Me._lib_desc = value
				Me.SendPropertyChanged("lib_desc")
				Me.Onlib_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lib_cant", DbType:="Int NOT NULL")>  _
	Public Property lib_cant() As Integer
		Get
			Return Me._lib_cant
		End Get
		Set
			If ((Me._lib_cant = value)  _
						= false) Then
				Me.Onlib_cantChanging(value)
				Me.SendPropertyChanging
				Me._lib_cant = value
				Me.SendPropertyChanged("lib_cant")
				Me.Onlib_cantChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lib_precio", DbType:="Int NOT NULL")>  _
	Public Property lib_precio() As Integer
		Get
			Return Me._lib_precio
		End Get
		Set
			If ((Me._lib_precio = value)  _
						= false) Then
				Me.Onlib_precioChanging(value)
				Me.SendPropertyChanging
				Me._lib_precio = value
				Me.SendPropertyChanged("lib_precio")
				Me.Onlib_precioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lib_activo", DbType:="Bit NOT NULL")>  _
	Public Property lib_activo() As Boolean
		Get
			Return Me._lib_activo
		End Get
		Set
			If ((Me._lib_activo = value)  _
						= false) Then
				Me.Onlib_activoChanging(value)
				Me.SendPropertyChanging
				Me._lib_activo = value
				Me.SendPropertyChanged("lib_activo")
				Me.Onlib_activoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lib_editorial", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property lib_editorial() As String
		Get
			Return Me._lib_editorial
		End Get
		Set
			If (String.Equals(Me._lib_editorial, value) = false) Then
				Me.Onlib_editorialChanging(value)
				Me.SendPropertyChanging
				Me._lib_editorial = value
				Me.SendPropertyChanged("lib_editorial")
				Me.Onlib_editorialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lib_usu_id", DbType:="Int NOT NULL")>  _
	Public Property lib_usu_id() As Integer
		Get
			Return Me._lib_usu_id
		End Get
		Set
			If ((Me._lib_usu_id = value)  _
						= false) Then
				Me.Onlib_usu_idChanging(value)
				Me.SendPropertyChanging
				Me._lib_usu_id = value
				Me.SendPropertyChanged("lib_usu_id")
				Me.Onlib_usu_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Localidad")>  _
Partial Public Class Localidad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _loc_id As Integer
	
	Private _loc_desc As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onloc_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onloc_idChanged()
    End Sub
    Partial Private Sub Onloc_descChanging(value As String)
    End Sub
    Partial Private Sub Onloc_descChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loc_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property loc_id() As Integer
		Get
			Return Me._loc_id
		End Get
		Set
			If ((Me._loc_id = value)  _
						= false) Then
				Me.Onloc_idChanging(value)
				Me.SendPropertyChanging
				Me._loc_id = value
				Me.SendPropertyChanged("loc_id")
				Me.Onloc_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loc_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property loc_desc() As String
		Get
			Return Me._loc_desc
		End Get
		Set
			If (String.Equals(Me._loc_desc, value) = false) Then
				Me.Onloc_descChanging(value)
				Me.SendPropertyChanging
				Me._loc_desc = value
				Me.SendPropertyChanged("loc_desc")
				Me.Onloc_descChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Patente")>  _
Partial Public Class Patente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _pat_id As Integer
	
	Private _pat_nom As String
	
	Private _pat_desc As String
	
	Private _par_perm As String
	
	Private _pat_dvh As Integer
	
	Private _usu_pat As EntitySet(Of usu_pat)
	
	Private _pat_fam As EntitySet(Of pat_fam)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onpat_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onpat_idChanged()
    End Sub
    Partial Private Sub Onpat_nomChanging(value As String)
    End Sub
    Partial Private Sub Onpat_nomChanged()
    End Sub
    Partial Private Sub Onpat_descChanging(value As String)
    End Sub
    Partial Private Sub Onpat_descChanged()
    End Sub
    Partial Private Sub Onpar_permChanging(value As String)
    End Sub
    Partial Private Sub Onpar_permChanged()
    End Sub
    Partial Private Sub Onpat_dvhChanging(value As Integer)
    End Sub
    Partial Private Sub Onpat_dvhChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._usu_pat = New EntitySet(Of usu_pat)(AddressOf Me.attach_usu_pat, AddressOf Me.detach_usu_pat)
		Me._pat_fam = New EntitySet(Of pat_fam)(AddressOf Me.attach_pat_fam, AddressOf Me.detach_pat_fam)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pat_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property pat_id() As Integer
		Get
			Return Me._pat_id
		End Get
		Set
			If ((Me._pat_id = value)  _
						= false) Then
				Me.Onpat_idChanging(value)
				Me.SendPropertyChanging
				Me._pat_id = value
				Me.SendPropertyChanged("pat_id")
				Me.Onpat_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pat_nom", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property pat_nom() As String
		Get
			Return Me._pat_nom
		End Get
		Set
			If (String.Equals(Me._pat_nom, value) = false) Then
				Me.Onpat_nomChanging(value)
				Me.SendPropertyChanging
				Me._pat_nom = value
				Me.SendPropertyChanged("pat_nom")
				Me.Onpat_nomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pat_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property pat_desc() As String
		Get
			Return Me._pat_desc
		End Get
		Set
			If (String.Equals(Me._pat_desc, value) = false) Then
				Me.Onpat_descChanging(value)
				Me.SendPropertyChanging
				Me._pat_desc = value
				Me.SendPropertyChanged("pat_desc")
				Me.Onpat_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_par_perm", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property par_perm() As String
		Get
			Return Me._par_perm
		End Get
		Set
			If (String.Equals(Me._par_perm, value) = false) Then
				Me.Onpar_permChanging(value)
				Me.SendPropertyChanging
				Me._par_perm = value
				Me.SendPropertyChanged("par_perm")
				Me.Onpar_permChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pat_dvh", DbType:="Int NOT NULL")>  _
	Public Property pat_dvh() As Integer
		Get
			Return Me._pat_dvh
		End Get
		Set
			If ((Me._pat_dvh = value)  _
						= false) Then
				Me.Onpat_dvhChanging(value)
				Me.SendPropertyChanging
				Me._pat_dvh = value
				Me.SendPropertyChanged("pat_dvh")
				Me.Onpat_dvhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Patente_usu_pat", Storage:="_usu_pat", ThisKey:="pat_id", OtherKey:="pat_id")>  _
	Public Property usu_pat() As EntitySet(Of usu_pat)
		Get
			Return Me._usu_pat
		End Get
		Set
			Me._usu_pat.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Patente_pat_fam", Storage:="_pat_fam", ThisKey:="pat_id", OtherKey:="pat_id")>  _
	Public Property pat_fam() As EntitySet(Of pat_fam)
		Get
			Return Me._pat_fam
		End Get
		Set
			Me._pat_fam.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_usu_pat(ByVal entity As usu_pat)
		Me.SendPropertyChanging
		entity.Patente = Me
	End Sub
	
	Private Sub detach_usu_pat(ByVal entity As usu_pat)
		Me.SendPropertyChanging
		entity.Patente = Nothing
	End Sub
	
	Private Sub attach_pat_fam(ByVal entity As pat_fam)
		Me.SendPropertyChanging
		entity.Patente = Me
	End Sub
	
	Private Sub detach_pat_fam(ByVal entity As pat_fam)
		Me.SendPropertyChanging
		entity.Patente = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.traduccion")>  _
Partial Public Class traduccion
	
	Private _tra_id As Integer
	
	Private _tra_idio_id As Integer
	
	Private _tra_texto As String
	
	Private _tra_control As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tra_id", DbType:="Int NOT NULL")>  _
	Public Property tra_id() As Integer
		Get
			Return Me._tra_id
		End Get
		Set
			If ((Me._tra_id = value)  _
						= false) Then
				Me._tra_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tra_idio_id", DbType:="Int NOT NULL")>  _
	Public Property tra_idio_id() As Integer
		Get
			Return Me._tra_idio_id
		End Get
		Set
			If ((Me._tra_idio_id = value)  _
						= false) Then
				Me._tra_idio_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tra_texto", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property tra_texto() As String
		Get
			Return Me._tra_texto
		End Get
		Set
			If (String.Equals(Me._tra_texto, value) = false) Then
				Me._tra_texto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tra_control", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property tra_control() As String
		Get
			Return Me._tra_control
		End Get
		Set
			If (String.Equals(Me._tra_control, value) = false) Then
				Me._tra_control = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuario")>  _
Partial Public Class Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _usu_id As Integer
	
	Private _usu_nom As String
	
	Private _usu_ape As String
	
	Private _usu_dni As Integer
	
	Private _usu_pass As String
	
	Private _usu_log As String
	
	Private _usu_dvh As Integer
	
	Private _usu_activo As Boolean
	
	Private _usu_ciii As Integer
	
	Private _usu_bloqueado As System.Nullable(Of Boolean)
	
	Private _usu_email As String
	
	Private _usu_idio_id As System.Nullable(Of Integer)
	
	Private _usu_pat_id As System.Nullable(Of Integer)
	
	Private _usu_fam_id As System.Nullable(Of Integer)
	
	Private _fam_usu As EntitySet(Of fam_usu)
	
	Private _Bitacora As EntitySet(Of Bitacora)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onusu_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onusu_idChanged()
    End Sub
    Partial Private Sub Onusu_nomChanging(value As String)
    End Sub
    Partial Private Sub Onusu_nomChanged()
    End Sub
    Partial Private Sub Onusu_apeChanging(value As String)
    End Sub
    Partial Private Sub Onusu_apeChanged()
    End Sub
    Partial Private Sub Onusu_dniChanging(value As Integer)
    End Sub
    Partial Private Sub Onusu_dniChanged()
    End Sub
    Partial Private Sub Onusu_passChanging(value As String)
    End Sub
    Partial Private Sub Onusu_passChanged()
    End Sub
    Partial Private Sub Onusu_logChanging(value As String)
    End Sub
    Partial Private Sub Onusu_logChanged()
    End Sub
    Partial Private Sub Onusu_dvhChanging(value As Integer)
    End Sub
    Partial Private Sub Onusu_dvhChanged()
    End Sub
    Partial Private Sub Onusu_activoChanging(value As Boolean)
    End Sub
    Partial Private Sub Onusu_activoChanged()
    End Sub
    Partial Private Sub Onusu_ciiiChanging(value As Integer)
    End Sub
    Partial Private Sub Onusu_ciiiChanged()
    End Sub
    Partial Private Sub Onusu_bloqueadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onusu_bloqueadoChanged()
    End Sub
    Partial Private Sub Onusu_emailChanging(value As String)
    End Sub
    Partial Private Sub Onusu_emailChanged()
    End Sub
    Partial Private Sub Onusu_idio_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onusu_idio_idChanged()
    End Sub
    Partial Private Sub Onusu_pat_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onusu_pat_idChanged()
    End Sub
    Partial Private Sub Onusu_fam_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onusu_fam_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fam_usu = New EntitySet(Of fam_usu)(AddressOf Me.attach_fam_usu, AddressOf Me.detach_fam_usu)
		Me._Bitacora = New EntitySet(Of Bitacora)(AddressOf Me.attach_Bitacora, AddressOf Me.detach_Bitacora)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property usu_id() As Integer
		Get
			Return Me._usu_id
		End Get
		Set
			If ((Me._usu_id = value)  _
						= false) Then
				Me.Onusu_idChanging(value)
				Me.SendPropertyChanging
				Me._usu_id = value
				Me.SendPropertyChanged("usu_id")
				Me.Onusu_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_nom", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property usu_nom() As String
		Get
			Return Me._usu_nom
		End Get
		Set
			If (String.Equals(Me._usu_nom, value) = false) Then
				Me.Onusu_nomChanging(value)
				Me.SendPropertyChanging
				Me._usu_nom = value
				Me.SendPropertyChanged("usu_nom")
				Me.Onusu_nomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_ape", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property usu_ape() As String
		Get
			Return Me._usu_ape
		End Get
		Set
			If (String.Equals(Me._usu_ape, value) = false) Then
				Me.Onusu_apeChanging(value)
				Me.SendPropertyChanging
				Me._usu_ape = value
				Me.SendPropertyChanged("usu_ape")
				Me.Onusu_apeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_dni", DbType:="Int NOT NULL")>  _
	Public Property usu_dni() As Integer
		Get
			Return Me._usu_dni
		End Get
		Set
			If ((Me._usu_dni = value)  _
						= false) Then
				Me.Onusu_dniChanging(value)
				Me.SendPropertyChanging
				Me._usu_dni = value
				Me.SendPropertyChanged("usu_dni")
				Me.Onusu_dniChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_pass", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property usu_pass() As String
		Get
			Return Me._usu_pass
		End Get
		Set
			If (String.Equals(Me._usu_pass, value) = false) Then
				Me.Onusu_passChanging(value)
				Me.SendPropertyChanging
				Me._usu_pass = value
				Me.SendPropertyChanged("usu_pass")
				Me.Onusu_passChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_log", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property usu_log() As String
		Get
			Return Me._usu_log
		End Get
		Set
			If (String.Equals(Me._usu_log, value) = false) Then
				Me.Onusu_logChanging(value)
				Me.SendPropertyChanging
				Me._usu_log = value
				Me.SendPropertyChanged("usu_log")
				Me.Onusu_logChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_dvh", DbType:="Int NOT NULL")>  _
	Public Property usu_dvh() As Integer
		Get
			Return Me._usu_dvh
		End Get
		Set
			If ((Me._usu_dvh = value)  _
						= false) Then
				Me.Onusu_dvhChanging(value)
				Me.SendPropertyChanging
				Me._usu_dvh = value
				Me.SendPropertyChanged("usu_dvh")
				Me.Onusu_dvhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_activo", DbType:="Bit NOT NULL")>  _
	Public Property usu_activo() As Boolean
		Get
			Return Me._usu_activo
		End Get
		Set
			If ((Me._usu_activo = value)  _
						= false) Then
				Me.Onusu_activoChanging(value)
				Me.SendPropertyChanging
				Me._usu_activo = value
				Me.SendPropertyChanged("usu_activo")
				Me.Onusu_activoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_ciii", DbType:="Int NOT NULL")>  _
	Public Property usu_ciii() As Integer
		Get
			Return Me._usu_ciii
		End Get
		Set
			If ((Me._usu_ciii = value)  _
						= false) Then
				Me.Onusu_ciiiChanging(value)
				Me.SendPropertyChanging
				Me._usu_ciii = value
				Me.SendPropertyChanged("usu_ciii")
				Me.Onusu_ciiiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_bloqueado", DbType:="Bit")>  _
	Public Property usu_bloqueado() As System.Nullable(Of Boolean)
		Get
			Return Me._usu_bloqueado
		End Get
		Set
			If (Me._usu_bloqueado.Equals(value) = false) Then
				Me.Onusu_bloqueadoChanging(value)
				Me.SendPropertyChanging
				Me._usu_bloqueado = value
				Me.SendPropertyChanged("usu_bloqueado")
				Me.Onusu_bloqueadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_email", DbType:="VarChar(50)")>  _
	Public Property usu_email() As String
		Get
			Return Me._usu_email
		End Get
		Set
			If (String.Equals(Me._usu_email, value) = false) Then
				Me.Onusu_emailChanging(value)
				Me.SendPropertyChanging
				Me._usu_email = value
				Me.SendPropertyChanged("usu_email")
				Me.Onusu_emailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_idio_id", DbType:="Int")>  _
	Public Property usu_idio_id() As System.Nullable(Of Integer)
		Get
			Return Me._usu_idio_id
		End Get
		Set
			If (Me._usu_idio_id.Equals(value) = false) Then
				Me.Onusu_idio_idChanging(value)
				Me.SendPropertyChanging
				Me._usu_idio_id = value
				Me.SendPropertyChanged("usu_idio_id")
				Me.Onusu_idio_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_pat_id", DbType:="Int")>  _
	Public Property usu_pat_id() As System.Nullable(Of Integer)
		Get
			Return Me._usu_pat_id
		End Get
		Set
			If (Me._usu_pat_id.Equals(value) = false) Then
				Me.Onusu_pat_idChanging(value)
				Me.SendPropertyChanging
				Me._usu_pat_id = value
				Me.SendPropertyChanged("usu_pat_id")
				Me.Onusu_pat_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usu_fam_id", DbType:="Int")>  _
	Public Property usu_fam_id() As System.Nullable(Of Integer)
		Get
			Return Me._usu_fam_id
		End Get
		Set
			If (Me._usu_fam_id.Equals(value) = false) Then
				Me.Onusu_fam_idChanging(value)
				Me.SendPropertyChanging
				Me._usu_fam_id = value
				Me.SendPropertyChanged("usu_fam_id")
				Me.Onusu_fam_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_fam_usu", Storage:="_fam_usu", ThisKey:="usu_id", OtherKey:="usu_id")>  _
	Public Property fam_usu() As EntitySet(Of fam_usu)
		Get
			Return Me._fam_usu
		End Get
		Set
			Me._fam_usu.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Bitacora", Storage:="_Bitacora", ThisKey:="usu_id", OtherKey:="but_usu_id")>  _
	Public Property Bitacora() As EntitySet(Of Bitacora)
		Get
			Return Me._Bitacora
		End Get
		Set
			Me._Bitacora.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_fam_usu(ByVal entity As fam_usu)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_fam_usu(ByVal entity As fam_usu)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Bitacora(ByVal entity As Bitacora)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Bitacora(ByVal entity As Bitacora)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vent_lib")>  _
Partial Public Class vent_lib
	
	Private _vent_id As Integer
	
	Private _lib_id As Integer
	
	Private _vent_lib_cant As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_id", DbType:="Int NOT NULL")>  _
	Public Property vent_id() As Integer
		Get
			Return Me._vent_id
		End Get
		Set
			If ((Me._vent_id = value)  _
						= false) Then
				Me._vent_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lib_id", DbType:="Int NOT NULL")>  _
	Public Property lib_id() As Integer
		Get
			Return Me._lib_id
		End Get
		Set
			If ((Me._lib_id = value)  _
						= false) Then
				Me._lib_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_lib_cant", DbType:="Int NOT NULL")>  _
	Public Property vent_lib_cant() As Integer
		Get
			Return Me._vent_lib_cant
		End Get
		Set
			If ((Me._vent_lib_cant = value)  _
						= false) Then
				Me._vent_lib_cant = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Criticidad")>  _
Partial Public Class Criticidad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _crit_id As Integer
	
	Private _crit_desc As String
	
	Private _crit_dvh As Integer
	
	Private _Bitacora As EntitySet(Of Bitacora)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncrit_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncrit_idChanged()
    End Sub
    Partial Private Sub Oncrit_descChanging(value As String)
    End Sub
    Partial Private Sub Oncrit_descChanged()
    End Sub
    Partial Private Sub Oncrit_dvhChanging(value As Integer)
    End Sub
    Partial Private Sub Oncrit_dvhChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bitacora = New EntitySet(Of Bitacora)(AddressOf Me.attach_Bitacora, AddressOf Me.detach_Bitacora)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crit_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property crit_id() As Integer
		Get
			Return Me._crit_id
		End Get
		Set
			If ((Me._crit_id = value)  _
						= false) Then
				Me.Oncrit_idChanging(value)
				Me.SendPropertyChanging
				Me._crit_id = value
				Me.SendPropertyChanged("crit_id")
				Me.Oncrit_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crit_desc", DbType:="NChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property crit_desc() As String
		Get
			Return Me._crit_desc
		End Get
		Set
			If (String.Equals(Me._crit_desc, value) = false) Then
				Me.Oncrit_descChanging(value)
				Me.SendPropertyChanging
				Me._crit_desc = value
				Me.SendPropertyChanged("crit_desc")
				Me.Oncrit_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crit_dvh", DbType:="Int NOT NULL")>  _
	Public Property crit_dvh() As Integer
		Get
			Return Me._crit_dvh
		End Get
		Set
			If ((Me._crit_dvh = value)  _
						= false) Then
				Me.Oncrit_dvhChanging(value)
				Me.SendPropertyChanging
				Me._crit_dvh = value
				Me.SendPropertyChanged("crit_dvh")
				Me.Oncrit_dvhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Criticidad_Bitacora", Storage:="_Bitacora", ThisKey:="crit_id", OtherKey:="bit_crit_id")>  _
	Public Property Bitacora() As EntitySet(Of Bitacora)
		Get
			Return Me._Bitacora
		End Get
		Set
			Me._Bitacora.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bitacora(ByVal entity As Bitacora)
		Me.SendPropertyChanging
		entity.Criticidad = Me
	End Sub
	
	Private Sub detach_Bitacora(ByVal entity As Bitacora)
		Me.SendPropertyChanging
		entity.Criticidad = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DVV")>  _
Partial Public Class DVV
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _iddvv As Integer
	
	Private _dvv_tabla_nom As String
	
	Private _dvv_dvv As Integer
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OniddvvChanging(value As Integer)
    End Sub
    Partial Private Sub OniddvvChanged()
    End Sub
    Partial Private Sub Ondvv_tabla_nomChanging(value As String)
    End Sub
    Partial Private Sub Ondvv_tabla_nomChanged()
    End Sub
    Partial Private Sub Ondvv_dvvChanging(value As Integer)
    End Sub
    Partial Private Sub Ondvv_dvvChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iddvv", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property iddvv() As Integer
		Get
			Return Me._iddvv
		End Get
		Set
			If ((Me._iddvv = value)  _
						= false) Then
				Me.OniddvvChanging(value)
				Me.SendPropertyChanging
				Me._iddvv = value
				Me.SendPropertyChanged("iddvv")
				Me.OniddvvChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dvv_tabla_nom", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property dvv_tabla_nom() As String
		Get
			Return Me._dvv_tabla_nom
		End Get
		Set
			If (String.Equals(Me._dvv_tabla_nom, value) = false) Then
				Me.Ondvv_tabla_nomChanging(value)
				Me.SendPropertyChanging
				Me._dvv_tabla_nom = value
				Me.SendPropertyChanged("dvv_tabla_nom")
				Me.Ondvv_tabla_nomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dvv_dvv", DbType:="Int NOT NULL")>  _
	Public Property dvv_dvv() As Integer
		Get
			Return Me._dvv_dvv
		End Get
		Set
			If ((Me._dvv_dvv = value)  _
						= false) Then
				Me.Ondvv_dvvChanging(value)
				Me.SendPropertyChanging
				Me._dvv_dvv = value
				Me.SendPropertyChanged("dvv_dvv")
				Me.Ondvv_dvvChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Vendedor")>  _
Partial Public Class Vendedor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _vend_id As Integer
	
	Private _vend_nom As String
	
	Private _vend_legajo As Integer
	
	Private _vend_ape As String
	
	Private _vend_tel As Integer
	
	Private _vend_activo As Boolean
	
	Private _vend_email As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onvend_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onvend_idChanged()
    End Sub
    Partial Private Sub Onvend_nomChanging(value As String)
    End Sub
    Partial Private Sub Onvend_nomChanged()
    End Sub
    Partial Private Sub Onvend_legajoChanging(value As Integer)
    End Sub
    Partial Private Sub Onvend_legajoChanged()
    End Sub
    Partial Private Sub Onvend_apeChanging(value As String)
    End Sub
    Partial Private Sub Onvend_apeChanged()
    End Sub
    Partial Private Sub Onvend_telChanging(value As Integer)
    End Sub
    Partial Private Sub Onvend_telChanged()
    End Sub
    Partial Private Sub Onvend_activoChanging(value As Boolean)
    End Sub
    Partial Private Sub Onvend_activoChanged()
    End Sub
    Partial Private Sub Onvend_emailChanging(value As String)
    End Sub
    Partial Private Sub Onvend_emailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vend_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property vend_id() As Integer
		Get
			Return Me._vend_id
		End Get
		Set
			If ((Me._vend_id = value)  _
						= false) Then
				Me.Onvend_idChanging(value)
				Me.SendPropertyChanging
				Me._vend_id = value
				Me.SendPropertyChanged("vend_id")
				Me.Onvend_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vend_nom", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property vend_nom() As String
		Get
			Return Me._vend_nom
		End Get
		Set
			If (String.Equals(Me._vend_nom, value) = false) Then
				Me.Onvend_nomChanging(value)
				Me.SendPropertyChanging
				Me._vend_nom = value
				Me.SendPropertyChanged("vend_nom")
				Me.Onvend_nomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vend_legajo", DbType:="Int NOT NULL")>  _
	Public Property vend_legajo() As Integer
		Get
			Return Me._vend_legajo
		End Get
		Set
			If ((Me._vend_legajo = value)  _
						= false) Then
				Me.Onvend_legajoChanging(value)
				Me.SendPropertyChanging
				Me._vend_legajo = value
				Me.SendPropertyChanged("vend_legajo")
				Me.Onvend_legajoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vend_ape", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property vend_ape() As String
		Get
			Return Me._vend_ape
		End Get
		Set
			If (String.Equals(Me._vend_ape, value) = false) Then
				Me.Onvend_apeChanging(value)
				Me.SendPropertyChanging
				Me._vend_ape = value
				Me.SendPropertyChanged("vend_ape")
				Me.Onvend_apeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vend_tel", DbType:="Int NOT NULL")>  _
	Public Property vend_tel() As Integer
		Get
			Return Me._vend_tel
		End Get
		Set
			If ((Me._vend_tel = value)  _
						= false) Then
				Me.Onvend_telChanging(value)
				Me.SendPropertyChanging
				Me._vend_tel = value
				Me.SendPropertyChanged("vend_tel")
				Me.Onvend_telChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vend_activo", DbType:="Bit NOT NULL")>  _
	Public Property vend_activo() As Boolean
		Get
			Return Me._vend_activo
		End Get
		Set
			If ((Me._vend_activo = value)  _
						= false) Then
				Me.Onvend_activoChanging(value)
				Me.SendPropertyChanging
				Me._vend_activo = value
				Me.SendPropertyChanged("vend_activo")
				Me.Onvend_activoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vend_email", DbType:="VarChar(50)")>  _
	Public Property vend_email() As String
		Get
			Return Me._vend_email
		End Get
		Set
			If (String.Equals(Me._vend_email, value) = false) Then
				Me.Onvend_emailChanging(value)
				Me.SendPropertyChanging
				Me._vend_email = value
				Me.SendPropertyChanged("vend_email")
				Me.Onvend_emailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Venta")>  _
Partial Public Class Venta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _vent_id As Integer
	
	Private _vent_clie_id As Integer
	
	Private _vent_vend_id As Integer
	
	Private _vent_usu_id As Integer
	
	Private _vent_lib_id As Integer
	
	Private _vent_importe As Decimal
	
	Private _vent_activo As Boolean
	
	Private _vent_cuotas As Integer
	
	Private _vent_fecha As Date
	
	Private _vent_dvh As Integer
	
	Private _vent_valorcuota As System.Nullable(Of Integer)
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onvent_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onvent_idChanged()
    End Sub
    Partial Private Sub Onvent_clie_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onvent_clie_idChanged()
    End Sub
    Partial Private Sub Onvent_vend_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onvent_vend_idChanged()
    End Sub
    Partial Private Sub Onvent_usu_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onvent_usu_idChanged()
    End Sub
    Partial Private Sub Onvent_lib_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onvent_lib_idChanged()
    End Sub
    Partial Private Sub Onvent_importeChanging(value As Decimal)
    End Sub
    Partial Private Sub Onvent_importeChanged()
    End Sub
    Partial Private Sub Onvent_activoChanging(value As Boolean)
    End Sub
    Partial Private Sub Onvent_activoChanged()
    End Sub
    Partial Private Sub Onvent_cuotasChanging(value As Integer)
    End Sub
    Partial Private Sub Onvent_cuotasChanged()
    End Sub
    Partial Private Sub Onvent_fechaChanging(value As Date)
    End Sub
    Partial Private Sub Onvent_fechaChanged()
    End Sub
    Partial Private Sub Onvent_dvhChanging(value As Integer)
    End Sub
    Partial Private Sub Onvent_dvhChanged()
    End Sub
    Partial Private Sub Onvent_valorcuotaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onvent_valorcuotaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property vent_id() As Integer
		Get
			Return Me._vent_id
		End Get
		Set
			If ((Me._vent_id = value)  _
						= false) Then
				Me.Onvent_idChanging(value)
				Me.SendPropertyChanging
				Me._vent_id = value
				Me.SendPropertyChanged("vent_id")
				Me.Onvent_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_clie_id", DbType:="Int NOT NULL")>  _
	Public Property vent_clie_id() As Integer
		Get
			Return Me._vent_clie_id
		End Get
		Set
			If ((Me._vent_clie_id = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onvent_clie_idChanging(value)
				Me.SendPropertyChanging
				Me._vent_clie_id = value
				Me.SendPropertyChanged("vent_clie_id")
				Me.Onvent_clie_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_vend_id", DbType:="Int NOT NULL")>  _
	Public Property vent_vend_id() As Integer
		Get
			Return Me._vent_vend_id
		End Get
		Set
			If ((Me._vent_vend_id = value)  _
						= false) Then
				Me.Onvent_vend_idChanging(value)
				Me.SendPropertyChanging
				Me._vent_vend_id = value
				Me.SendPropertyChanged("vent_vend_id")
				Me.Onvent_vend_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_usu_id", DbType:="Int NOT NULL")>  _
	Public Property vent_usu_id() As Integer
		Get
			Return Me._vent_usu_id
		End Get
		Set
			If ((Me._vent_usu_id = value)  _
						= false) Then
				Me.Onvent_usu_idChanging(value)
				Me.SendPropertyChanging
				Me._vent_usu_id = value
				Me.SendPropertyChanged("vent_usu_id")
				Me.Onvent_usu_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_lib_id", DbType:="Int NOT NULL")>  _
	Public Property vent_lib_id() As Integer
		Get
			Return Me._vent_lib_id
		End Get
		Set
			If ((Me._vent_lib_id = value)  _
						= false) Then
				Me.Onvent_lib_idChanging(value)
				Me.SendPropertyChanging
				Me._vent_lib_id = value
				Me.SendPropertyChanged("vent_lib_id")
				Me.Onvent_lib_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_importe", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property vent_importe() As Decimal
		Get
			Return Me._vent_importe
		End Get
		Set
			If ((Me._vent_importe = value)  _
						= false) Then
				Me.Onvent_importeChanging(value)
				Me.SendPropertyChanging
				Me._vent_importe = value
				Me.SendPropertyChanged("vent_importe")
				Me.Onvent_importeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_activo", DbType:="Bit NOT NULL")>  _
	Public Property vent_activo() As Boolean
		Get
			Return Me._vent_activo
		End Get
		Set
			If ((Me._vent_activo = value)  _
						= false) Then
				Me.Onvent_activoChanging(value)
				Me.SendPropertyChanging
				Me._vent_activo = value
				Me.SendPropertyChanged("vent_activo")
				Me.Onvent_activoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_cuotas", DbType:="Int NOT NULL")>  _
	Public Property vent_cuotas() As Integer
		Get
			Return Me._vent_cuotas
		End Get
		Set
			If ((Me._vent_cuotas = value)  _
						= false) Then
				Me.Onvent_cuotasChanging(value)
				Me.SendPropertyChanging
				Me._vent_cuotas = value
				Me.SendPropertyChanged("vent_cuotas")
				Me.Onvent_cuotasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_fecha", DbType:="DateTime NOT NULL")>  _
	Public Property vent_fecha() As Date
		Get
			Return Me._vent_fecha
		End Get
		Set
			If ((Me._vent_fecha = value)  _
						= false) Then
				Me.Onvent_fechaChanging(value)
				Me.SendPropertyChanging
				Me._vent_fecha = value
				Me.SendPropertyChanged("vent_fecha")
				Me.Onvent_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_dvh", DbType:="Int NOT NULL")>  _
	Public Property vent_dvh() As Integer
		Get
			Return Me._vent_dvh
		End Get
		Set
			If ((Me._vent_dvh = value)  _
						= false) Then
				Me.Onvent_dvhChanging(value)
				Me.SendPropertyChanging
				Me._vent_dvh = value
				Me.SendPropertyChanged("vent_dvh")
				Me.Onvent_dvhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vent_valorcuota", DbType:="Int")>  _
	Public Property vent_valorcuota() As System.Nullable(Of Integer)
		Get
			Return Me._vent_valorcuota
		End Get
		Set
			If (Me._vent_valorcuota.Equals(value) = false) Then
				Me.Onvent_valorcuotaChanging(value)
				Me.SendPropertyChanging
				Me._vent_valorcuota = value
				Me.SendPropertyChanged("vent_valorcuota")
				Me.Onvent_valorcuotaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Venta", Storage:="_Cliente", ThisKey:="vent_clie_id", OtherKey:="clie_id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Venta.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Venta.Add(Me)
					Me._vent_clie_id = value.clie_id
				Else
					Me._vent_clie_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[usu-pat]")>  _
Partial Public Class usu_pat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tipo As System.Nullable(Of Boolean)
	
	Private _pat_id As Integer
	
	Private _usu_id As Integer
	
	Private _dvh As System.Nullable(Of Integer)
	
	Private _Patente As EntityRef(Of Patente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntipoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OntipoChanged()
    End Sub
    Partial Private Sub Onpat_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onpat_idChanged()
    End Sub
    Partial Private Sub Onusu_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onusu_idChanged()
    End Sub
    Partial Private Sub OndvhChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndvhChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Patente = CType(Nothing, EntityRef(Of Patente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo", DbType:="Bit")>  _
	Public Property tipo() As System.Nullable(Of Boolean)
		Get
			Return Me._tipo
		End Get
		Set
			If (Me._tipo.Equals(value) = false) Then
				Me.OntipoChanging(value)
				Me.SendPropertyChanging
				Me._tipo = value
				Me.SendPropertyChanged("tipo")
				Me.OntipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[pat-id]", Storage:="_pat_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property pat_id() As Integer
		Get
			Return Me._pat_id
		End Get
		Set
			If ((Me._pat_id = value)  _
						= false) Then
				Me.Onpat_idChanging(value)
				Me.SendPropertyChanging
				Me._pat_id = value
				Me.SendPropertyChanged("pat_id")
				Me.Onpat_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[usu-id]", Storage:="_usu_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property usu_id() As Integer
		Get
			Return Me._usu_id
		End Get
		Set
			If ((Me._usu_id = value)  _
						= false) Then
				Me.Onusu_idChanging(value)
				Me.SendPropertyChanging
				Me._usu_id = value
				Me.SendPropertyChanged("usu_id")
				Me.Onusu_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dvh", DbType:="Int")>  _
	Public Property dvh() As System.Nullable(Of Integer)
		Get
			Return Me._dvh
		End Get
		Set
			If (Me._dvh.Equals(value) = false) Then
				Me.OndvhChanging(value)
				Me.SendPropertyChanging
				Me._dvh = value
				Me.SendPropertyChanged("dvh")
				Me.OndvhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Patente_usu_pat", Storage:="_Patente", ThisKey:="pat_id", OtherKey:="pat_id", IsForeignKey:=true)>  _
	Public Property Patente() As Patente
		Get
			Return Me._Patente.Entity
		End Get
		Set
			Dim previousValue As Patente = Me._Patente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Patente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Patente.Entity = Nothing
					previousValue.usu_pat.Remove(Me)
				End If
				Me._Patente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.usu_pat.Add(Me)
					Me._pat_id = value.pat_id
				Else
					Me._pat_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Patente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[fam-usu]")>  _
Partial Public Class fam_usu
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _fam_id As Integer
	
	Private _usu_id As Integer
	
	Private _dvh As System.Nullable(Of Integer)
	
	Private _Familia As EntityRef(Of Familia)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onfam_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onfam_idChanged()
    End Sub
    Partial Private Sub Onusu_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onusu_idChanged()
    End Sub
    Partial Private Sub OndvhChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndvhChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Familia = CType(Nothing, EntityRef(Of Familia))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[fam-id]", Storage:="_fam_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property fam_id() As Integer
		Get
			Return Me._fam_id
		End Get
		Set
			If ((Me._fam_id = value)  _
						= false) Then
				Me.Onfam_idChanging(value)
				Me.SendPropertyChanging
				Me._fam_id = value
				Me.SendPropertyChanged("fam_id")
				Me.Onfam_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[usu-id]", Storage:="_usu_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property usu_id() As Integer
		Get
			Return Me._usu_id
		End Get
		Set
			If ((Me._usu_id = value)  _
						= false) Then
				Me.Onusu_idChanging(value)
				Me.SendPropertyChanging
				Me._usu_id = value
				Me.SendPropertyChanged("usu_id")
				Me.Onusu_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dvh", DbType:="Int")>  _
	Public Property dvh() As System.Nullable(Of Integer)
		Get
			Return Me._dvh
		End Get
		Set
			If (Me._dvh.Equals(value) = false) Then
				Me.OndvhChanging(value)
				Me.SendPropertyChanging
				Me._dvh = value
				Me.SendPropertyChanged("dvh")
				Me.OndvhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Familia_fam_usu", Storage:="_Familia", ThisKey:="fam_id", OtherKey:="fam_id", IsForeignKey:=true)>  _
	Public Property Familia() As Familia
		Get
			Return Me._Familia.Entity
		End Get
		Set
			Dim previousValue As Familia = Me._Familia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Familia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Familia.Entity = Nothing
					previousValue.fam_usu.Remove(Me)
				End If
				Me._Familia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fam_usu.Add(Me)
					Me._fam_id = value.fam_id
				Else
					Me._fam_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Familia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_fam_usu", Storage:="_Usuario", ThisKey:="usu_id", OtherKey:="usu_id", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.fam_usu.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fam_usu.Add(Me)
					Me._usu_id = value.usu_id
				Else
					Me._usu_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[pat-fam]")>  _
Partial Public Class pat_fam
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _pat_id As Integer
	
	Private _fam_id As Integer
	
	Private _dvh As System.Nullable(Of Integer)
	
	Private _Familia As EntityRef(Of Familia)
	
	Private _Patente As EntityRef(Of Patente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onpat_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onpat_idChanged()
    End Sub
    Partial Private Sub Onfam_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onfam_idChanged()
    End Sub
    Partial Private Sub OndvhChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndvhChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Familia = CType(Nothing, EntityRef(Of Familia))
		Me._Patente = CType(Nothing, EntityRef(Of Patente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[pat-id]", Storage:="_pat_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property pat_id() As Integer
		Get
			Return Me._pat_id
		End Get
		Set
			If ((Me._pat_id = value)  _
						= false) Then
				Me.Onpat_idChanging(value)
				Me.SendPropertyChanging
				Me._pat_id = value
				Me.SendPropertyChanged("pat_id")
				Me.Onpat_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[fam-id]", Storage:="_fam_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property fam_id() As Integer
		Get
			Return Me._fam_id
		End Get
		Set
			If ((Me._fam_id = value)  _
						= false) Then
				Me.Onfam_idChanging(value)
				Me.SendPropertyChanging
				Me._fam_id = value
				Me.SendPropertyChanged("fam_id")
				Me.Onfam_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dvh", DbType:="Int")>  _
	Public Property dvh() As System.Nullable(Of Integer)
		Get
			Return Me._dvh
		End Get
		Set
			If (Me._dvh.Equals(value) = false) Then
				Me.OndvhChanging(value)
				Me.SendPropertyChanging
				Me._dvh = value
				Me.SendPropertyChanged("dvh")
				Me.OndvhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Familia_pat_fam", Storage:="_Familia", ThisKey:="fam_id", OtherKey:="fam_id", IsForeignKey:=true)>  _
	Public Property Familia() As Familia
		Get
			Return Me._Familia.Entity
		End Get
		Set
			Dim previousValue As Familia = Me._Familia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Familia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Familia.Entity = Nothing
					previousValue.pat_fam.Remove(Me)
				End If
				Me._Familia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.pat_fam.Add(Me)
					Me._fam_id = value.fam_id
				Else
					Me._fam_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Familia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Patente_pat_fam", Storage:="_Patente", ThisKey:="pat_id", OtherKey:="pat_id", IsForeignKey:=true)>  _
	Public Property Patente() As Patente
		Get
			Return Me._Patente.Entity
		End Get
		Set
			Dim previousValue As Patente = Me._Patente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Patente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Patente.Entity = Nothing
					previousValue.pat_fam.Remove(Me)
				End If
				Me._Patente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.pat_fam.Add(Me)
					Me._pat_id = value.pat_id
				Else
					Me._pat_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Patente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Bitacora")>  _
Partial Public Class Bitacora
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _bit_id As Integer
	
	Private _bit_fecha As Date
	
	Private _bit_desc As String
	
	Private _bit_usu_log As String
	
	Private _bit_dvh As Integer
	
	Private _but_usu_id As Integer
	
	Private _bit_crit_id As System.Nullable(Of Integer)
	
	Private _Criticidad As EntityRef(Of Criticidad)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onbit_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onbit_idChanged()
    End Sub
    Partial Private Sub Onbit_fechaChanging(value As Date)
    End Sub
    Partial Private Sub Onbit_fechaChanged()
    End Sub
    Partial Private Sub Onbit_descChanging(value As String)
    End Sub
    Partial Private Sub Onbit_descChanged()
    End Sub
    Partial Private Sub Onbit_usu_logChanging(value As String)
    End Sub
    Partial Private Sub Onbit_usu_logChanged()
    End Sub
    Partial Private Sub Onbit_dvhChanging(value As Integer)
    End Sub
    Partial Private Sub Onbit_dvhChanged()
    End Sub
    Partial Private Sub Onbut_usu_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onbut_usu_idChanged()
    End Sub
    Partial Private Sub Onbit_crit_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onbit_crit_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Criticidad = CType(Nothing, EntityRef(Of Criticidad))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bit_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property bit_id() As Integer
		Get
			Return Me._bit_id
		End Get
		Set
			If ((Me._bit_id = value)  _
						= false) Then
				Me.Onbit_idChanging(value)
				Me.SendPropertyChanging
				Me._bit_id = value
				Me.SendPropertyChanged("bit_id")
				Me.Onbit_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bit_fecha", DbType:="DateTime NOT NULL")>  _
	Public Property bit_fecha() As Date
		Get
			Return Me._bit_fecha
		End Get
		Set
			If ((Me._bit_fecha = value)  _
						= false) Then
				Me.Onbit_fechaChanging(value)
				Me.SendPropertyChanging
				Me._bit_fecha = value
				Me.SendPropertyChanged("bit_fecha")
				Me.Onbit_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bit_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property bit_desc() As String
		Get
			Return Me._bit_desc
		End Get
		Set
			If (String.Equals(Me._bit_desc, value) = false) Then
				Me.Onbit_descChanging(value)
				Me.SendPropertyChanging
				Me._bit_desc = value
				Me.SendPropertyChanged("bit_desc")
				Me.Onbit_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bit_usu_log", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property bit_usu_log() As String
		Get
			Return Me._bit_usu_log
		End Get
		Set
			If (String.Equals(Me._bit_usu_log, value) = false) Then
				Me.Onbit_usu_logChanging(value)
				Me.SendPropertyChanging
				Me._bit_usu_log = value
				Me.SendPropertyChanged("bit_usu_log")
				Me.Onbit_usu_logChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bit_dvh", DbType:="Int NOT NULL")>  _
	Public Property bit_dvh() As Integer
		Get
			Return Me._bit_dvh
		End Get
		Set
			If ((Me._bit_dvh = value)  _
						= false) Then
				Me.Onbit_dvhChanging(value)
				Me.SendPropertyChanging
				Me._bit_dvh = value
				Me.SendPropertyChanged("bit_dvh")
				Me.Onbit_dvhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_but_usu_id", DbType:="Int NOT NULL")>  _
	Public Property but_usu_id() As Integer
		Get
			Return Me._but_usu_id
		End Get
		Set
			If ((Me._but_usu_id = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onbut_usu_idChanging(value)
				Me.SendPropertyChanging
				Me._but_usu_id = value
				Me.SendPropertyChanged("but_usu_id")
				Me.Onbut_usu_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bit_crit_id", DbType:="Int")>  _
	Public Property bit_crit_id() As System.Nullable(Of Integer)
		Get
			Return Me._bit_crit_id
		End Get
		Set
			If (Me._bit_crit_id.Equals(value) = false) Then
				If Me._Criticidad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onbit_crit_idChanging(value)
				Me.SendPropertyChanging
				Me._bit_crit_id = value
				Me.SendPropertyChanged("bit_crit_id")
				Me.Onbit_crit_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Criticidad_Bitacora", Storage:="_Criticidad", ThisKey:="bit_crit_id", OtherKey:="crit_id", IsForeignKey:=true)>  _
	Public Property Criticidad() As Criticidad
		Get
			Return Me._Criticidad.Entity
		End Get
		Set
			Dim previousValue As Criticidad = Me._Criticidad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Criticidad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Criticidad.Entity = Nothing
					previousValue.Bitacora.Remove(Me)
				End If
				Me._Criticidad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bitacora.Add(Me)
					Me._bit_crit_id = value.crit_id
				Else
					Me._bit_crit_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Criticidad")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Bitacora", Storage:="_Usuario", ThisKey:="but_usu_id", OtherKey:="usu_id", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Bitacora.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bitacora.Add(Me)
					Me._but_usu_id = value.usu_id
				Else
					Me._but_usu_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
